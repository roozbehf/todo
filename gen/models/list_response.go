// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListResponse list response
// swagger:model ListResponse
type ListResponse struct {

	// todo items
	// Required: true
	TodoItems []*ListResponseTodoItemsItems0 `json:"todoItems"`
}

// Validate validates this list response
func (m *ListResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTodoItems(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListResponse) validateTodoItems(formats strfmt.Registry) error {

	if err := validate.Required("todoItems", "body", m.TodoItems); err != nil {
		return err
	}

	for i := 0; i < len(m.TodoItems); i++ {
		if swag.IsZero(m.TodoItems[i]) { // not required
			continue
		}

		if m.TodoItems[i] != nil {
			if err := m.TodoItems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("todoItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ListResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListResponse) UnmarshalBinary(b []byte) error {
	var res ListResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ListResponseTodoItemsItems0 list response todo items items0
// swagger:model ListResponseTodoItemsItems0
type ListResponseTodoItemsItems0 struct {

	// the unique id of the newly added item
	// Required: true
	ID *string `json:"id"`

	// title of the newly added item
	// Required: true
	Title *string `json:"title"`
}

// Validate validates this list response todo items items0
func (m *ListResponseTodoItemsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListResponseTodoItemsItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ListResponseTodoItemsItems0) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ListResponseTodoItemsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListResponseTodoItemsItems0) UnmarshalBinary(b []byte) error {
	var res ListResponseTodoItemsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
